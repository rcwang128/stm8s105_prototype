// C Compiler for STM8 (COSMIC Software)
// Parser V4.10.2 - 02 Nov 2011
// Generator (Limited) V4.3.7 - 29 Nov 2011

#include "stm8s.h"
#include "stdio.h"

#define UART2_PRINT

#ifdef UART2_PRINT
	#ifdef _RAISONANCE_
	#define PUTCHAR_PROTOTYPE int putchar (char c)
	#define GETCHAR_PROTOTYPE int getchar (void)
	#elif defined (_COSMIC_)
	#define PUTCHAR_PROTOTYPE char putchar (char c)
	#define GETCHAR_PROTOTYPE char getchar (void)
	#else /* _IAR_ */
	#define PUTCHAR_PROTOTYPE int putchar (int c)
	#define GETCHAR_PROTOTYPE int getchar (void)
	#endif /* _RAISONANCE_ */
#endif

void CLK_Config(void);
void GPIO_Config(void);
void TIM3_Config(void);
void UART2_Config(void);
//void TIM4_Config(void);

//#define TIM3_PERIOD 999

unsigned int overflow_count_tim3;

void main(void)
{
	CLK_Config();

	GPIO_Config();
	
	UART2_Config();

	TIM3_Config();

//	TIM4_Config();

	printf("Test!\n");
	printf("This is a Example.\n");

	while(1)
	{
		
		if (TIM3_GetCounter() == 9999)
		{
			GPIO_WriteReverse(GPIOD, GPIO_PIN_0);
			GPIO_WriteReverse(GPIOD, GPIO_PIN_2);
			//printf("b4: %ld\n", TIM3_FLAG_UPDATE);
			//TIM3_ClearFlag(TIM3_FLAG_UPDATE);
			printf("%ld\n", TIM3_FLAG_UPDATE);
		}
		/*
		if (TIM3_GetCounter() < 500)
		{
			GPIO_WriteHigh(GPIOD, GPIO_PIN_0);
			GPIO_WriteHigh(GPIOD, GPIO_PIN_2);
			//printf("\r\nTest!\n");
		}
		else
		{
			GPIO_WriteLow(GPIOD, GPIO_PIN_0);
			GPIO_WriteLow(GPIOD, GPIO_PIN_2);
		}
		*/
		
		/*
		//if (TIM3_GetFlagStatus(TIM3_FLAG_UPDATE))
		if (overflow_count_tim3 > TIM3_PERIOD)
		{
			GPIO_WriteReverse(GPIOD, GPIO_PIN_0);
			GPIO_WriteReverse(GPIOD, GPIO_PIN_2);
			printf("%ld", TIM3_FLAG_UPDATE);
			//TIM3_ClearFlag(TIM3_FLAG_UPDATE);
		}
		*/
	}
}

void CLK_Config(void)
{
	CLK_DeInit();
	
	// Enable all clock source and enable auto switch
	CLK_HSECmd(ENABLE);
	CLK_LSICmd(ENABLE);
	CLK_HSICmd(DISABLE);
	while(CLK_GetFlagStatus(CLK_FLAG_HSIRDY) == FALSE);
	
	CLK_ClockSwitchCmd(ENABLE);
	CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
	CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1); // 16MHz
	
	CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO, CLK_SOURCE_HSE, 
	DISABLE, CLK_CURRENTCLOCKSTATE_ENABLE);

	CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2, ENABLE);
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER3, ENABLE);
	//CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER4, ENABLE);

	CLK_PeripheralClockConfig(CLK_PERIPHERAL_SPI, DISABLE);
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C, DISABLE);
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC, DISABLE);
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_AWU, DISABLE);
	//CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART1, DISABLE);
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER1, DISABLE);
	CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2, DISABLE);

	CLK_CCOConfig(CLK_OUTPUT_CPU);
	CLK_CCOCmd(ENABLE);
}

void UART2_Config(void)
{
	UART2_DeInit();
	UART2_Init((uint32_t)115200, UART2_WORDLENGTH_8D, UART2_STOPBITS_1, UART2_PARITY_NO, UART2_SYNCMODE_CLOCK_DISABLE, UART2_MODE_TXRX_ENABLE);
	//UART2_Cmd(ENABLE);
}
	
void GPIO_Config(void)
{
	GPIO_DeInit(GPIOD);
	GPIO_DeInit(GPIOE);
	GPIO_Init(GPIOD, GPIO_PIN_0, GPIO_MODE_OUT_PP_LOW_FAST);
	GPIO_Init(GPIOD, GPIO_PIN_2, GPIO_MODE_OUT_PP_HIGH_FAST);
	GPIO_Init(GPIOE, GPIO_PIN_0, GPIO_MODE_OUT_PP_LOW_FAST);
}

void TIM3_Config(void)
{	
	TIM3_DeInit();
	TIM3_TimeBaseInit(TIM3_PRESCALER_8, 9999);	
	//TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);
	TIM3_Cmd(ENABLE);
	//enableInterrupts();
}

/*
void TIM4_Config(void)
{	
	TIM4_DeInit();
	TIM4_TimeBaseInit(TIM4_PRESCALER_32, 128);	
    TIM4_ITConfig(TIM4_IT_UPDATE, ENABLE);
	TIM4_Cmd(ENABLE);
}
*/

#ifdef UART2_PRINT
PUTCHAR_PROTOTYPE
{
  /* Write a character to the UART2 */
  UART2_SendData8(c);
  /* Loop until the end of transmission */
  while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);

  return (c);
}

/**
  * @brief Retargets the C library scanf function to the USART.
  * @param None
  * @retval char Character to Read
  */
GETCHAR_PROTOTYPE
{
#ifdef _COSMIC_
  char c = 0;
#else
  int c = 0;
#endif
  /* Loop until the Read data register flag is SET */
  while (UART2_GetFlagStatus(UART2_FLAG_RXNE) == RESET);
    c = UART2_ReceiveData8();
  return (c);
}
#endif